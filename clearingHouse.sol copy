// Beta clearingHouse.sol

// SPDX-License-Identifier: Unlicensed

// Work progress: Needs constant improvement and adjustment. 
// Contract on rinkeby: 
// UNI on rinkeby: 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984, USDC on rinkeby: 0x4DBCdF9B62e891a7cec5A2568C3F4FAF9E8Abe2b, WETH on rinkeby: 0xc778417e063141139fce010982780140aa0cd5ab
// AEX on rinkeby: 0x21e4E26bba6E3001bB612f2DB41b284501888e99
// Pairs on rinkeby: 0x1f71FE9bC82B06e5E4944b92F6c568C149F2a411

// Needs LOTS OF TESTING! Need to test:-
// 1. Test contract when maker and taker fee changes.
// 2. Test it for re-entrancy after adding re-entrancy guard.
// Think about this, can't they make a fake token? And try to do a re-entrancy attack? (trying to steal counterparty funds over and over)

pragma solidity ^0.8.16;

import './utils.sol';
import './lib/IERC20.sol';
import './lib/IERC20Metadata.sol';
import './lib/IWETH.sol';
import './lib/IWrappedCoin.sol';
import './lib/IXchg.sol';
import './lib/TransferHelper.sol';

contract Execution {
    struct OrderInfo {
        address taker;
        address maker;
        address makerCoinContract;
        address takerCoinContract;
        uint256 totalMakerQty;
        uint256 totalTakerQty;
        uint256 toBeSentByTaker;
        uint256 toBeSentByMaker;
        bytes32 orderHash;
        bool increaseNonceOnCompleteFill;
    }

    struct TraderFees {
        uint256 AEX;
        uint256 quote;
    }

    struct Fees {
        TraderFees maker;
        TraderFees taker;
    }

    event TradeExecuted (bytes32 indexed orderHash, address indexed taker, uint256 filledTakerQty, uint256 maker_fees, uint256 taker_fees, uint256 AEX_maker_fees, uint256 AEX_taker_fees);
    event TaxRebate(address indexed rebate_sender, address rebate_receiver, uint256 amount);

    // TODO: Add VIP discount

    mapping(address => uint256) public nonces;
    mapping(bytes32 => uint256) public orderFilledTakerQty; // keccak256 mesasge hash => filledTakerQty
    mapping(address => bool) public payFeesUsingAEX;
    mapping(address => bool) private VIPs;

    uint256 makerFee;
    uint256 takerFee;
    address manager;
    address xchgInterfaceAddress;
    address AEXToken;
    uint256 AEXDiscount;
    IERC20 AEX;
    IERC20Metadata AEXMeta;
    IXchg iXchg;
    uint8 AEXDecimals;

    constructor(address _xchgInterfaceAddress, address _AEXToken /*, uint256 _makerFee, uint256 _takerFee, address _manager */) {
        // Have an option to change this address as well if you have to change interface address anytime. Also a function to change fees and discount
        xchgInterfaceAddress = _xchgInterfaceAddress;
        AEXToken = _AEXToken;
        makerFee = 750; // Percentage fee = divided by 10k, decimal notation: divided by 1mil
        takerFee = 750;
        AEXDiscount = 25;

        AEX = IERC20(AEXToken);
        AEXMeta = IERC20Metadata(AEXToken);
        AEXDecimals = AEXMeta.decimals();
        iXchg = IXchg(_xchgInterfaceAddress);
    }

    modifier onlyMaker(address maker) {
        require(maker == msg.sender, "ERROR: Order can only be by cancelled by it's maker.");
        _;
    }

    modifier onlyManager(address _manager) {
        require(_manager == msg.sender, "ERROR: Only the manager can run this function.");
        _;
    }

    // modifier checkBalancesAndApproval() {
        
    // }

    // The frontend will convert the wrapped coin balance to the balance of the actual coins and back. We won't be showing the wrapped coin balnace to the user, it will end up confusing them. 
    // Take care of the wrapped coin as well please.

    function validateOrder(uint64 deadline, uint64 nonce, bytes memory signature, OrderInfo memory o, bytes32 orderHash) public view {
        // order expiration/signature validation
        require(nonce == nonces[o.maker], "validateOrder: ORDER_CANCELLED_OR_ALREADY_FILLED");
        require(deadline >= block.timestamp, "validateOrder: ORDER_EXPIRED");
        require(dexUtils.checkSignature(o.maker, orderHash, signature), "validateOrder: INVALID_SIGNATURE");
        require(orderFilledTakerQty[orderHash] != (2**256)-1, "validateOrder: ORDER_ALREADY_EXECUTED_OR_CANCELLED");

        // quantity validation
        require(o.toBeSentByTaker <= o.totalTakerQty - orderFilledTakerQty[orderHash], "validateOrder: INSUFFICIENT_QUANTITY_AVAILABLE");
        require(o.toBeSentByTaker != 0, "validateOrder: NOT_ALLOWED_TO_TAKE_0_QUANTITY");

        // address validation
        require(o.maker != address(0) && msg.sender != address(0), "validateOrder: maker or taker cannot be 0x00 address.");
        require(o.makerCoinContract != address(0) && o.takerCoinContract != address(0), "validateOrder: neither of the coin contracts can be 0 address.");
        require(o.makerCoinContract != o.takerCoinContract, "validateOrder: makerCoinContract and takerCoinContract cannot be the same.");
    }

    // The frontend will take care and keep track of complete and partial fills. The job of the contract is just to do proper execution. Hence, orderFilledTakerQty won't always be accurate and on full fills, sometimes the whole nonce is just cancelled.
    function takePublicOrder(address maker, address makerCoinContract, address takerCoinContract, uint256 totalMakerQty, uint256 totalTakerQty, uint64 deadline, uint64 nonce, bool increaseNonceOnCompleteFill, bytes memory signature, uint256 toBeSentByTaker) public {
        bytes32 orderHash = dexUtils.getOrderHash(maker, makerCoinContract, takerCoinContract, totalMakerQty, totalTakerQty, deadline, nonce, increaseNonceOnCompleteFill);
        OrderInfo memory o = OrderInfo(msg.sender, maker, makerCoinContract, takerCoinContract, totalMakerQty, totalTakerQty, toBeSentByTaker, 0, orderHash, increaseNonceOnCompleteFill);

        validateOrder(deadline, nonce, signature, o, orderHash);

        // Calculate amount to be sent by maker
        o.toBeSentByMaker = (o.totalMakerQty * (o.toBeSentByTaker * 1e10) / o.totalTakerQty) / 1e10;

        address quoteContract = _checkQuote(o);
        _updateOrder(o); // Updating order first, state changes first. 
        executeTrade(o, quoteContract); // External calls at last. 
      }

    function takePublicOrderUsingNative(address maker, address makerCoinContract, address takerCoinContract, uint256 totalMakerQty, uint256 totalTakerQty, uint256 deadline, uint256 nonce, bool increaseNonceOnCompleteFill, bytes memory signature) public payable {
        // No need for toBeSentByTaker, as it's equal to msg.value only. 
        // Assuming that the decimals of actual eth and weth are the same
        
        bytes32 orderHash = dexUtils.getOrderHash(maker, makerCoinContract, takerCoinContract, totalMakerQty, totalTakerQty, deadline, nonce, increaseNonceOnCompleteFill);
        OrderInfo memory o = OrderInfo(msg.sender, maker, makerCoinContract, takerCoinContract, totalMakerQty, totalTakerQty, msg.value, 0, orderHash, increaseNonceOnCompleteFill);

        require(nonce == nonces[maker], "takePublicOrder: ORDER_CANCELLED_OR_ALREADY_FILLED");
        require(deadline >= block.timestamp, "takePublicOrder: ORDER_EXPIRED");
        require(dexUtils.checkSignature(o.maker, orderHash, signature), "takePublicOrder: INVALID_SIGNATURE");

        require(orderFilledTakerQty[orderHash] != (2**256)-1, "takePublicOrder: ORDER_ALREADY_EXECUTED_OR_CANCELLED");
        require(msg.value <= totalTakerQty - orderFilledTakerQty[orderHash], "takePublicOrder: INSUFFICIENT_QUANTITY_AVAILABLE"); // To be sentByTaker amount has been verified
        require(msg.value != 0, "takePublicOrder: NOT_ALLOWED_TO_TAKE_0_QUANTITY");

        require(maker != address(0) && msg.sender != address(0), "takePublicOrder: maker or taker cannot be 0x00 address.");
        require(makerCoinContract != address(0) && takerCoinContract != address(0), "takePublicOrder: neither of the coin contracts can be 0 address.");
        require(makerCoinContract != takerCoinContract, "takePublicOrder: makerCoinContract and takerCoinContract cannot be the same.");
        require(takerCoinContract == iXchg.getNativeWrappedContract(), "takePublicOrder: Can only execute this function if the taker coin is the chain's native coin.");

        // Calculating amount to be sent by maker.
        o.toBeSentByMaker = (o.totalMakerQty * (msg.value * 1e10) / o.totalTakerQty) / 1e10;

        _updateOrder(o); // State changes first

        IWETH(takerCoinContract).deposit{value: msg.value}();
        TransferHelper.safeTransfer(takerCoinContract, msg.sender, msg.value);
        executeTrade(o, takerCoinContract);
    }

    function _checkQuote(OrderInfo memory o) internal view returns(address) { // (quote)
        // Just need to know which the quote contract is
        address[] memory _quoteContracts = iXchg.getQuoteContracts();

        // Todo: Fix base/quote
        address quoteContract = dexUtils.checkQuoteContract(o.makerCoinContract, o.takerCoinContract, _quoteContracts);
        require(quoteContract != address(0), "takePublicOrder: Invalid quote contract");

        return quoteContract;
    }

    function _updateOrder(OrderInfo memory i) internal {
        // Check if the order is now partially filled or fully filled
        uint256 taker_amount_left = i.totalTakerQty - i.toBeSentByTaker - orderFilledTakerQty[i.orderHash];
        
        if(taker_amount_left > 0) {
            // Add it to the partial fills and emit an event of a partial fill
            orderFilledTakerQty[i.orderHash] += i.toBeSentByTaker;
        } else {
            if(i.increaseNonceOnCompleteFill) {
                nonces[i.maker] += 1;
            } else {
                orderFilledTakerQty[i.orderHash] = (2**256)-1;
            }
        }
    }

    function taxRebate(OrderInfo memory o) internal {
        uint256 coinTax = wrappedCoin(o.makerCoinContract).getCoinTax();
        // Calculate 5% of the entire amount in USD, here I'm assuming that coinTax will be a percentage. Amount to send from taker to maker:
        uint256 rebate = (o.toBeSentByTaker*(coinTax/100))/2;

        IERC20(o.takerCoinContract).transferFrom(o.maker, o.taker, rebate); // Maker sends rebate to the taker. 
        emit TaxRebate(o.maker, o.taker, rebate);
    }

    function cancelAllOrders() public {
        nonces[msg.sender] += 1;
    }

    // TODO: Fix this lol anyone can cancel someone's order
    function cancelOrder(address maker, address makerCoinContract, address takerCoinContract, uint256 makerQty, uint256 takerQty, uint256 deadline, uint256 nonce, bool increaseNonceOnCompleteFill) public onlyMaker(maker) {
        bytes32 orderId = dexUtils.getOrderHash(maker, makerCoinContract, takerCoinContract, makerQty, takerQty, deadline, nonce, increaseNonceOnCompleteFill);
        orderFilledTakerQty[orderId] = (2**256)-1;
    }

    function payFeesWithAEX(bool option) public {
        payFeesUsingAEX[msg.sender] = option;
    }

    function getOrderHashToBeSigned(address makerCoinContract, address takerCoinContract, uint256 makerQty, uint256 takerQty, uint256 deadline, uint256 nonce, bool increaseNonceOnCompleteFill) public view returns (bytes32) {
        return keccak256(abi.encode(msg.sender, makerCoinContract, takerCoinContract, makerQty, takerQty, deadline, nonce, increaseNonceOnCompleteFill));
    }

    // function manageUSDCFees() public onlyFeeManager {

    // }

    function managerWho() public view returns(address) {
        return manager;
    }
}